<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.2.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

<!-- ==================IOC 或 DI 部分采用注解方式，自动扫描与装配 bean ========================= -->
	<context:component-scan base-package="com.wxweven" /> 
	<!-- AOP:配置自动为匹配 aspectJ 注解的 Java 类生成代理对象 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	
<!-- ==================配置数据源=================================  -->
	<!-- 1. 加载外部的 jdbc.propertites 配置文件  -->
	<context:property-placeholder location="classpath:config.properties" />
	
	<!-- 2. 利用 c3p0 定义数据库连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${driverClass}" /> <!-- 定义数据库驱动 -->
		<property name="jdbcUrl" value="${jdbcUrl}" /> <!-- 定义数据库URL -->
		<property name="user" value="${user}" /> <!-- 定义数据库的用户名 -->
		<property name="password" value="${password}" /> <!-- 定义数据库的密码 -->

		<!-- c3p0连接其他配置 -->	
		<property name="minPoolSize" value="1" />
		<property name="maxPoolSize" value="40" />
		<property name="maxIdleTime" value="1800" />
		<property name="acquireIncrement" value="2" />
		<property name="maxStatements" value="0" />
		<property name="initialPoolSize" value="2" />
		<property name="idleConnectionTestPeriod" value="1800" />
		<property name="acquireRetryAttempts" value="30" />
		<property name="acquireRetryDelay" value="100" />
		<property name="breakAfterAcquireFailure" value="true" />
		<property name="testConnectionOnCheckout" value="false" />
	</bean>
	
	<!-- 3. 配置 Hibernate 的 SessionFactory -->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" /> <!-- 定义SessionFactory必须注入dataSource -->
		<property name="configLocation" value="classpath:hibernate.cfg.xml" /> <!-- 定义Hibernate的配置文件hibernate.cfg.xml -->
	</bean>
	
	
<!-- ==================配置 spring 的声明式事务管理器================================= -->
	<!-- 1. 配置事务管理器 -->
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- 2. 采用注解的方式 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
<!-- ==================== 配置其他 AOP, 利用 spring 的 xml 方式来配置 ===================== -->
	<!-- <aop:config>
		配置切点表达式
		<aop:pointcut expression="execution(* com.wxweven.aop.ArithmeticCalculator.*(..))" id="aoppointcut" />
		配置切面2以及通知
		<aop:aspect ref="loggingAspect" order="2">
			<aop:before method="beforeMethod" pointcut-ref="aoppointcut" />
			<aop:after method="afterMethod" pointcut-ref="aoppointcut" />
			<aop:after-throwing method="afterThrowing" pointcut-ref="aoppointcut" throwing="e" />
			<aop:after-returning method="afterReturning" pointcut-ref="aoppointcut" returning="result" />
			<aop:around method="aroundMethod" pointcut-ref="pointcut"/>
		</aop:aspect>
		配置切面1以及通知
		<aop:aspect ref="vlidationAspect" order="1">
			<aop:before method="validateArgs" pointcut-ref="aoppointcut" />
		</aop:aspect>
	</aop:config> -->
	
</beans>

